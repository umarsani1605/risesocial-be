generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User management domain - handles authentication, profiles, and settings
model User {
  id                Int                  @id @default(autoincrement())
  username          String               @unique @db.VarChar(50)
  first_name        String               @db.VarChar(100)
  last_name         String               @db.VarChar(100)
  avatar            String?              @db.VarChar(500)
  email             String               @unique @db.VarChar(255)
  phone             String?              @db.VarChar(20)
  password          String               @db.VarChar(255)
  email_verified_at DateTime?
  phone_verified_at DateTime?
  role              UserRole             @default(USER)
  gender            Gender?
  country           String?              @db.VarChar(100)
  province          String?              @db.VarChar(100)
  city              String?              @db.VarChar(100)
  last_education    String?              @db.VarChar(255)
  current_job       String?              @db.VarChar(255)
  current_company   String?              @db.VarChar(255)
  skills            String[]
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  enrollments       BootcampEnrollment[] @relation("UserEnrollmentRelation")
  job_applications  JobApplication[]
  saved_jobs        UserSavedJob[]
  user_setting      UserSetting?

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([created_at(sort: Desc)])
  @@map("users")
}

/// User notification and privacy preferences
model UserSetting {
  id                   Int      @id @default(autoincrement())
  user_id              Int      @unique
  job_notification     Boolean  @default(true)
  program_notification Boolean  @default(true)
  promo_notification   Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

/// Main bootcamp entity with comprehensive metadata and validation
model Bootcamp {
  id               Int                   @id @default(autoincrement())
  title            String                @db.VarChar(255)
  path_slug        String                @unique @db.VarChar(255)
  description      String?
  duration         String?               @db.VarChar(100)
  format           String?               @db.VarChar(100)
  category         String?               @db.VarChar(100)
  image_url        String?               @db.VarChar(500)
  rating           Float                 @default(0)
  rating_count     Int                   @default(0)
  certificate      Boolean               @default(false)
  portfolio        Boolean               @default(false)
  status           BootcampStatus        @default(ACTIVE)
  meta_title       String?               @db.VarChar(255)
  meta_description String?               @db.VarChar(500)
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  enrollments      BootcampEnrollment[]  @relation("BootcampEnrollmentRelation")
  faqs             BootcampFaq[]         @relation("BootcampFaqRelation")
  features         BootcampFeature[]     @relation("BootcampFeatureRelation")
  instructors      BootcampInstructor[]  @relation("BootcampInstructorRelation")
  pricing          BootcampPricing[]     @relation("BootcampPricingRelation")
  testimonials     BootcampTestimonial[] @relation("BootcampTestimonialRelation")
  topics           BootcampTopic[]       @relation("BootcampTopicRelation")

  @@index([category, status])
  @@index([status])
  @@index([path_slug])
  @@index([created_at(sort: Desc)])
  @@index([rating(sort: Desc)])
  @@map("bootcamps")
}

/// Bootcamp pricing tiers with validation
model BootcampPricing {
  id             Int                  @id @default(autoincrement())
  bootcamp_id    Int
  name           String               @db.VarChar(100)
  original_price Int
  discount_price Int
  tier_order     Int                  @default(1)
  created_at     DateTime             @default(now())
  enrollments    BootcampEnrollment[] @relation("EnrollmentPricingRelation")
  bootcamp       Bootcamp             @relation("BootcampPricingRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)

  @@index([bootcamp_id, tier_order])
  @@map("bootcamp_pricing")
}

/// Bootcamp features and benefits
model BootcampFeature {
  id            Int      @id @default(autoincrement())
  bootcamp_id   Int
  title         String   @db.VarChar(255)
  description   String?
  icon          String?  @db.VarChar(100)
  feature_order Int      @default(1)
  created_at    DateTime @default(now())
  bootcamp      Bootcamp @relation("BootcampFeatureRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)

  @@index([bootcamp_id, feature_order])
  @@map("bootcamp_features")
}

/// Bootcamp curriculum topics
model BootcampTopic {
  id          Int               @id @default(autoincrement())
  bootcamp_id Int
  title       String            @db.VarChar(255)
  description String?
  topic_order Int               @default(1)
  created_at  DateTime          @default(now())
  sessions    BootcampSession[] @relation("TopicSessionRelation")
  bootcamp    Bootcamp          @relation("BootcampTopicRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)

  @@index([bootcamp_id, topic_order])
  @@map("bootcamp_topics")
}

/// Individual sessions within topics
model BootcampSession {
  id            Int           @id @default(autoincrement())
  topic_id      Int
  title         String        @db.VarChar(255)
  session_order Int           @default(1)
  created_at    DateTime      @default(now())
  topic         BootcampTopic @relation("TopicSessionRelation", fields: [topic_id], references: [id], onDelete: Cascade)

  @@index([topic_id, session_order])
  @@map("bootcamp_sessions")
}

/// Master instructor data
model Instructor {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar(255)
  job_title            String?              @db.VarChar(255)
  avatar_url           String?              @db.VarChar(500)
  description          String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  bootcamp_instructors BootcampInstructor[] @relation("InstructorBootcampRelation")

  @@index([name])
  @@map("instructors")
}

/// Many-to-many relationship between bootcamps and instructors
model BootcampInstructor {
  bootcamp_id      Int
  instructor_id    Int
  instructor_order Int        @default(1)
  bootcamp         Bootcamp   @relation("BootcampInstructorRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)
  instructor       Instructor @relation("InstructorBootcampRelation", fields: [instructor_id], references: [id], onDelete: Cascade)

  @@id([bootcamp_id, instructor_id])
  @@map("bootcamp_instructors")
}

/// Alumni testimonials and reviews
model BootcampTestimonial {
  id                Int      @id @default(autoincrement())
  bootcamp_id       Int
  name              String   @db.VarChar(255)
  avatar_url        String?  @db.VarChar(500)
  comment           String
  testimonial_order Int      @default(1)
  created_at        DateTime @default(now())
  bootcamp          Bootcamp @relation("BootcampTestimonialRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)

  @@index([bootcamp_id, testimonial_order])
  @@map("bootcamp_testimonials")
}

/// Frequently asked questions
model BootcampFaq {
  id          Int      @id @default(autoincrement())
  bootcamp_id Int
  question    String
  answer      String
  faq_order   Int      @default(1)
  created_at  DateTime @default(now())
  bootcamp    Bootcamp @relation("BootcampFaqRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)

  @@index([bootcamp_id, faq_order])
  @@map("bootcamp_faqs")
}

/// User enrollments with progress tracking
model BootcampEnrollment {
  id                  Int              @id @default(autoincrement())
  bootcamp_id         Int
  user_id             Int
  pricing_tier_id     Int?
  enrollment_status   EnrollmentStatus @default(ENROLLED)
  progress_percentage Int              @default(0)
  enrolled_at         DateTime         @default(now())
  completed_at        DateTime?
  bootcamp            Bootcamp         @relation("BootcampEnrollmentRelation", fields: [bootcamp_id], references: [id], onDelete: Cascade)
  pricing_tier        BootcampPricing? @relation("EnrollmentPricingRelation", fields: [pricing_tier_id], references: [id])
  user                User             @relation("UserEnrollmentRelation", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([bootcamp_id, user_id], map: "uk_enrollment_user_bootcamp")
  @@index([user_id])
  @@index([bootcamp_id])
  @@index([enrollment_status])
  @@index([enrolled_at(sort: Desc)])
  @@map("bootcamp_enrollments")
}

/// Enhanced Companies table dengan full LinkedIn data
model Company {
  id                             Int      @id @default(autoincrement())
  name                           String   @db.VarChar(255)
  slug                           String   @unique @db.VarChar(255)
  logo_url                       String?  @db.VarChar(500)
  website_url                    String?  @db.VarChar(500)
  industry                       String?  @db.VarChar(255)
  headquarters                   String?  @db.VarChar(255)
  description                    String?
  linkedin_url                   String?  @db.VarChar(500)
  linkedin_slug                  String?  @db.VarChar(255)
  linkedin_employees             Int?
  linkedin_size                  String?  @db.VarChar(100)
  linkedin_slogan                String?  @db.VarChar(500)
  linkedin_followers             Int?
  linkedin_type                  String?  @db.VarChar(100)
  linkedin_founded_date          String?  @db.VarChar(4)
  linkedin_specialties           Json?
  linkedin_locations             Json?
  linkedin_is_recruitment_agency Boolean  @default(false)
  created_at                     DateTime @default(now())
  updated_at                     DateTime @updatedAt
  jobs                           Job[]

  @@index([industry])
  @@index([linkedin_size])
  @@index([linkedin_employees])
  @@map("companies")
}

/// Enhanced Locations table dengan koordinat GPS
model JobLocation {
  id                Int      @id @default(autoincrement())
  city              String?  @db.VarChar(255)
  region            String?  @db.VarChar(255)
  country           String   @db.VarChar(255)
  timezone          String?  @db.VarChar(100)
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)
  raw_location_data Json?
  location_type     String?  @db.VarChar(100)
  is_remote         Boolean  @default(false)
  created_at        DateTime @default(now())
  jobs              Job[]

  @@unique([city, region, country])
  @@index([country])
  @@index([is_remote])
  @@index([latitude, longitude])
  @@map("job_locations")
}

/// Enhanced Jobs table dengan FULL LinkedIn API integration
model Job {
  id                        Int              @id @default(autoincrement())
  title                     String           @db.VarChar(255)
  slug                      String           @db.VarChar(255)
  company_id                Int
  location_id               Int?
  description               String
  employment_type           String           @db.VarChar(50)
  seniority_level           String?          @db.VarChar(100)
  status                    String           @default("active") @db.VarChar(50)
  direct_apply              Boolean          @default(true)
  external_url              String?          @db.VarChar(500)
  posted_date               DateTime
  valid_until               DateTime?
  source_type               String?          @db.VarChar(100)
  source                    String?          @db.VarChar(100)
  source_domain             String?          @db.VarChar(255)
  source_url                String?          @db.VarChar(500)
  linkedin_job_id           String?          @db.VarChar(255)
  recruiter_name            String?          @db.VarChar(255)
  recruiter_title           String?          @db.VarChar(255)
  recruiter_url             String?          @db.VarChar(500)
  salary_raw                String?          @db.VarChar(500)
  location_requirements_raw String?
  meta_title                String?          @db.VarChar(255)
  meta_description          String?          @db.VarChar(500)
  api_created_at            DateTime?
  created_at                DateTime         @default(now())
  updated_at                DateTime         @updatedAt
  ai_insights               JobAIInsights?
  applications              JobApplication[]
  company                   Company          @relation(fields: [company_id], references: [id])
  location                  JobLocation?     @relation(fields: [location_id], references: [id])
  saved_by_users            UserSavedJob[]

  @@unique([company_id, slug])
  @@index([company_id])
  @@index([location_id])
  @@index([employment_type])
  @@index([seniority_level])
  @@index([posted_date(sort: Desc)])
  @@index([source])
  @@map("jobs")
}

/// AI-Enhanced Job Insights (GAME CHANGER!)
model JobAIInsights {
  id                         Int      @id @default(autoincrement())
  job_id                     Int      @unique
  ai_salary_currency         String?  @db.VarChar(3)
  ai_salary_value            Int?
  ai_salary_min_value        Int?
  ai_salary_max_value        Int?
  ai_salary_unit_text        String?  @db.VarChar(100)
  ai_benefits                String?
  ai_experience_level        String?  @db.VarChar(100)
  ai_work_arrangement        String?  @db.VarChar(100)
  ai_work_arrangement_days   Int?
  ai_remote_location         String?  @db.VarChar(255)
  ai_remote_location_derived String?  @db.VarChar(255)
  ai_key_skills              Json?
  ai_core_responsibilities   String?
  ai_requirements_summary    String?
  ai_working_hours           String?  @db.VarChar(100)
  ai_job_language            String?  @db.VarChar(100)
  ai_visa_sponsorship        Boolean?
  ai_hiring_manager_name     String?  @db.VarChar(255)
  ai_hiring_manager_email    String?  @db.VarChar(255)
  salary_confidence          Decimal? @db.Decimal(3, 2)
  skills_confidence          Decimal? @db.Decimal(3, 2)
  requirements_confidence    Decimal? @db.Decimal(3, 2)
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt
  job                        Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@index([ai_experience_level])
  @@index([ai_work_arrangement])
  @@index([ai_salary_min_value, ai_salary_max_value])
  @@map("job_ai_insights")
}

/// User Job Applications dengan enhanced tracking
model JobApplication {
  id           Int      @id @default(autoincrement())
  job_id       Int
  user_id      Int
  status       String   @default("PENDING") @db.VarChar(50)
  cover_letter String?
  resume_url   String?  @db.VarChar(500)
  applied_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  notes        String?
  job          Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, job_id])
  @@index([user_id])
  @@index([job_id])
  @@index([status])
  @@map("job_applications")
}

/// User Saved Jobs untuk favorites
model UserSavedJob {
  user_id  Int
  job_id   Int
  saved_at DateTime @default(now())
  id       Int      @id @default(autoincrement())
  job      Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, job_id])
  @@index([user_id])
  @@index([job_id])
  @@map("user_saved_jobs")
}

model Testimonial {
  id         Int               @id @default(autoincrement())
  name       String            @db.VarChar(255)
  country    String            @db.VarChar(100)
  text       String
  rating     Int               @default(5)
  status     TestimonialStatus @default(ACTIVE)
  featured   Boolean           @default(false)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  @@index([status])
  @@index([featured])
  @@index([country])
  @@map("testimonials")
}

model Program {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  slug        String        @unique @db.VarChar(255)
  image       String        @db.VarChar(500)
  description String
  status      ProgramStatus @default(ACTIVE)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@index([status])
  @@index([slug])
  @@map("programs")
}

/// Main RYLS registration form data
model RylsRegistration {
  id                      Int                        @id @default(autoincrement())
  full_name               String                     @db.VarChar(255)
  email                   String                     @db.VarChar(255)
  residence               String                     @db.VarChar(255)
  nationality             String                     @db.VarChar(255)
  second_nationality      String?                    @db.VarChar(255)
  whatsapp                String                     @db.VarChar(50)
  institution             String                     @db.VarChar(255)
  date_of_birth           DateTime                   @db.Date
  gender                  RylsGender
  discover_source         RylsDiscoverSource
  discover_other_text     String?
  scholarship_type        RylsScholarshipType
  created_at              DateTime                   @default(now())
  updated_at              DateTime                   @updatedAt
  ryls_payment_id         Int?
  fully_funded_submission RylsFullyFundedSubmission? @relation("RegistrationToFullyFunded")
  payment                 RylsPayment?               @relation(fields: [ryls_payment_id], references: [id])
  self_funded_submission  RylsSelfFundedSubmission?  @relation("RegistrationToSelfFunded")
  RylsPayment             RylsPayment[]

  @@index([scholarship_type])
  @@index([created_at(sort: Desc)])
  @@index([ryls_payment_id])
  @@map("ryls_registrations")
}

/// File upload metadata
model FileUpload {
  id                    Int                        @id @default(autoincrement())
  original_name         String                     @db.VarChar(255)
  file_path             String                     @db.VarChar(500)
  file_size             Int
  mime_type             String                     @db.VarChar(100)
  created_at            DateTime                   @default(now())
  upload_type           String                     @db.VarChar(50)
  fully_funded_essays   RylsFullyFundedSubmission? @relation("FullyFundedToFile")
  payment_proofs        RylsPayment?               @relation("PaymentToFileUpload")
  self_funded_headshots RylsSelfFundedSubmission?  @relation("SelfFundedToFile")

  @@index([upload_type])
  @@index([created_at(sort: Desc)])
  @@map("file_uploads")
}

/// Fully funded scholarship submissions
model RylsFullyFundedSubmission {
  id                Int              @id @default(autoincrement())
  registration_id   Int              @unique
  essay_topic       String?
  essay_file_id     Int?             @unique
  essay_description String?
  created_at        DateTime         @default(now())
  essay_file        FileUpload?      @relation("FullyFundedToFile", fields: [essay_file_id], references: [id])
  registration      RylsRegistration @relation("RegistrationToFullyFunded", fields: [registration_id], references: [id], onDelete: Cascade)

  @@index([registration_id])
  @@index([essay_file_id])
  @@map("ryls_fully_funded_submissions")
}

/// Self funded submissions
model RylsSelfFundedSubmission {
  id               Int              @id @default(autoincrement())
  registration_id  Int              @unique
  passport_number  String           @db.VarChar(100)
  need_visa        Boolean
  headshot_file_id Int?             @unique
  read_policies    Boolean
  created_at       DateTime         @default(now())
  headshot_file    FileUpload?      @relation("SelfFundedToFile", fields: [headshot_file_id], references: [id])
  registration     RylsRegistration @relation("RegistrationToSelfFunded", fields: [registration_id], references: [id], onDelete: Cascade)

  @@index([registration_id])
  @@index([headshot_file_id])
  @@map("ryls_self_funded_submissions")
}

/// Midtrans payment transactions
model MidtransPayment {
  id                 Int                       @id @default(autoincrement())
  order_id           String                    @unique @db.VarChar(100)
  snap_token         String                    @db.VarChar(255)
  redirect_url       String?                   @db.VarChar(500)
  transaction_id     String?                   @db.VarChar(100)
  payment_type       String?                   @db.VarChar(50)
  gross_amount_idr   Int
  currency           String                    @default("IDR") @db.VarChar(10)
  transaction_status MidtransTransactionStatus @default(pending)
  fraud_status       MidtransFraudStatus?
  payment_details    Json?
  last_notification  Json?
  notified_at        DateTime?
  paid_at            DateTime?
  created_at         DateTime                  @default(now())
  updated_at         DateTime                  @updatedAt
  ryls_payment       RylsPayment?              @relation("PaymentToMidtrans")

  @@index([transaction_status])
  @@index([order_id])
  @@map("midtrans_payments")
}

/// RYLS payment information
model RylsPayment {
  id               Int                @id @default(autoincrement())
  registration_id  Int?
  paid_at          DateTime?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  midtrans_id      Int?               @unique
  payment_proof_id Int?               @unique
  amount           Int
  status           String             @default("PENDING") @db.VarChar(20)
  type             String             @db.VarChar(50)
  midtrans         MidtransPayment?   @relation("PaymentToMidtrans", fields: [midtrans_id], references: [id])
  payment_proof    FileUpload?        @relation("PaymentToFileUpload", fields: [payment_proof_id], references: [id])
  registration     RylsRegistration?  @relation("PaymentToRegistration", fields: [registration_id], references: [id])
  RylsRegistration RylsRegistration[]

  @@index([status])
  @@index([type])
  @@index([created_at(sort: Desc)])
  @@map("ryls_payments")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum BootcampStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum TestimonialStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ProgramStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum RylsRegistrationStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

enum RylsGender {
  FEMALE
  MALE
  PREFER_NOT_TO_SAY
}

enum RylsDiscoverSource {
  RISE_INSTAGRAM
  OTHER_INSTAGRAM
  FRIENDS
  OTHER
}

enum RylsScholarshipType {
  FULLY_FUNDED
  SELF_FUNDED
}

enum MidtransTransactionStatus {
  pending
  capture
  settlement
  deny
  cancel
  expire
  refund
  chargeback
}

enum MidtransFraudStatus {
  accept
  challenge
  deny
}
